/**
 * is-api
 * Tiny javascript library that you can extend with your own type checking methods.
 *
 * @version 1.0.1
 * @author George Raptis <georapbox@gmail.com> (georapbox.github.io)
 * @homepage https://github.com/georapbox/is-api#readme
 * @license MIT
 */
{"version":3,"sources":["is.js"],"names":["name","context","definition","define","amd","module","exports","this","makeInterface","method","i","len","interfaces","length","is","not","all","any","applyInterfaces","prop","hasOwnProperty","call","indexOf","publicMethods","oldPublicAPI","arraySlice","Array","prototype","slice","Object","func","apply","arguments","index","args","extend","options","TypeError","Error","noConflict"],"mappings":"CAAC,SAAUA,EAAMC,EAASC,GACxB,aAEsB,mBAAXC,QAAyBA,OAAOC,IACzCD,OAAOD,GACoB,oBAAXG,QAA0BA,OAAOC,QACjDD,OAAOC,QAAUJ,IAEjBD,EAAY,GAAIC,EAElB,KAFmCD,GARrC,CAUE,EAAMM,KAAM,SAAUP,EAAMC,GAC5B,aA+CA,SAASO,EAAcC,GACrB,IAAIC,EAAI,EACJC,EAAMC,EAAWC,OAErB,IAAKH,EAAGA,EAAIC,EAAKD,GAAK,EACpB,OAAQE,EAAWF,IACjB,IAAK,MAAOI,EAAGC,IAAIN,GAAUK,EAAGC,IAAID,EAAGL,IAAU,MACjD,IAAK,MAAOK,EAAGE,IAAIP,GAAUK,EAAGE,IAAIF,EAAGL,IAAU,MACjD,IAAK,MAAOK,EAAGG,IAAIR,GAAUK,EAAGG,IAAIH,EAAGL,KAK7C,SAASS,IACP,IAAIC,EAEJ,IAAKA,KAAQL,EACPM,EAAeC,KAAKP,EAAIK,KACQ,IAA9BP,EAAWU,QAAQH,KAAiD,IAAjCI,EAAcD,QAAQH,IAC3DX,EAAcW,GAhEtB,IAAIL,EACAU,GAAgBvB,OAAeD,GAC/BY,GAAc,MAAO,MAAO,OAC5BW,GAAiB,SAAU,cAC3BE,EAAaC,MAAMC,UAAUC,MAC7BR,EAAiBS,OAAOF,UAAUP,eA6FtC,OAAON,GACLC,IA5FF,SAAae,GACX,OAAO,WACL,OAAQA,EAAKC,MAAM,KAAMN,EAAWJ,KAAKW,cA2F3ChB,IAvFF,SAAac,GACX,OAAO,WACL,IAEIG,EAFAC,EAAOT,EAAWJ,KAAKW,WACvBnB,EAASqB,EAAKrB,OAGlB,IAAKoB,EAAQ,EAAGA,EAAQpB,EAAQoB,GAAS,EACvC,IAAKH,EAAKT,KAAK,KAAMa,EAAKD,IACxB,OAAO,EAIX,OAAO,IA4EThB,IAxEF,SAAaa,GACX,OAAO,WACL,IAEIG,EAFAC,EAAOT,EAAWJ,KAAKW,WACvBnB,EAASqB,EAAKrB,OAGlB,IAAKoB,EAAQ,EAAGA,EAAQpB,EAAQoB,GAAS,EACvC,GAAIH,EAAKT,KAAK,KAAMa,EAAKD,IACvB,OAAO,EAIX,OAAO,IA6DTE,OAhCF,SAAgBC,GACd,IAAIjB,EAEJ,IAAKA,KAAQiB,EACX,GAAIhB,EAAeC,KAAKe,EAASjB,GAAO,CACtC,GAA6B,mBAAlBiB,EAAQjB,GACjB,MAAM,IAAIkB,UAAU,kDAGtB,IAAkC,IAA9BzB,EAAWU,QAAQH,KAAiD,IAAjCI,EAAcD,QAAQH,GAG3D,MAAM,IAAImB,MAAMnB,EAAO,iIAFvBL,EAAGK,GAAQiB,EAAQjB,GAOzBD,KAgBAqB,WAZF,WAIE,OAHItC,IACFA,EAAQD,GAAQwB,GAEXV","file":"is.min.js","sourcesContent":["(function (name, context, definition) {\n  'use strict';\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(definition);\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = definition();\n  } else {\n    context[name] = definition(name, context);\n  }\n}('is', this, function (name, context) {\n  'use strict';\n\n  var is;\n  var oldPublicAPI = (context || {})[name];\n  var interfaces = ['not', 'all', 'any'];\n  var publicMethods = ['extend', 'noConflict'];\n  var arraySlice = Array.prototype.slice;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function not(func) {\n    return function () {\n      return !func.apply(null, arraySlice.call(arguments));\n    };\n  }\n\n  function all(func) {\n    return function () {\n      var args = arraySlice.call(arguments);\n      var length = args.length;\n      var index;\n\n      for (index = 0; index < length; index += 1) {\n        if (!func.call(null, args[index])) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  }\n\n  function any(func) {\n    return function () {\n      var args = arraySlice.call(arguments);\n      var length = args.length;\n      var index;\n\n      for (index = 0; index < length; index += 1) {\n        if (func.call(null, args[index])) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }\n\n  function makeInterface(method) {\n    var i = 0;\n    var len = interfaces.length;\n\n    for (i; i < len; i += 1) {\n      switch (interfaces[i]) {\n        case 'not': is.not[method] = is.not(is[method]); break;\n        case 'all': is.all[method] = is.all(is[method]); break;\n        case 'any': is.any[method] = is.any(is[method]); break;\n      }\n    }\n  }\n\n  function applyInterfaces() {\n    var prop;\n\n    for (prop in is) {\n      if (hasOwnProperty.call(is, prop)) {\n        if (interfaces.indexOf(prop) === -1 && publicMethods.indexOf(prop) === -1) {\n          makeInterface(prop);\n        }\n      }\n    }\n  }\n\n  function extend(options) {\n    var prop;\n\n    for (prop in options) {\n      if (hasOwnProperty.call(options, prop)) {\n        if (typeof options[prop] !== 'function') {\n          throw new TypeError('A function is expected to extend the API with.');\n        }\n\n        if (interfaces.indexOf(prop) === -1 && publicMethods.indexOf(prop) === -1) {\n          is[prop] = options[prop];\n        } else {\n          throw new Error(prop + ' is a reserved property from the library and cannot be overwritten. Reserved words are: not, any, all, extend and noConflict.');\n        }\n      }\n    }\n\n    applyInterfaces();\n  }\n\n  /* istanbul ignore next */\n  function noConflict() {\n    if (context) {\n      context[name] = oldPublicAPI;\n    }\n    return is;\n  }\n\n  return is = {\n    not: not,\n    all: all,\n    any: any,\n    extend: extend,\n    noConflict: noConflict\n  };\n}));\n"]}